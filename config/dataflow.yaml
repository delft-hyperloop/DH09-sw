# Define procedures

procedures:
  # ====== Decode =======
  decode_offset:
    input: 'u16'
    output: 'f32'
    formula: 'x as f32'
  decode_temperature:
    input: 'u8'
    output: 'f32'
    formula: |
      let precision_range_start: f32 = 20.0;
      if x & 0x80 != 0 {
        precision_range_start + ((x & 0x7F) as f32 / 10.0)
        // High precision mode
      } else {
        x as f32 // Integer mode
      }
  decode_bms_voltage:
    input: 'u16'
    output: 'f32'
    formula: '(x as f32) / 10.0'
  decode_bms_temperature:
    input: 'u16'
    output: 'f32'
    formula: 'x as f32'
  convert_i16_to_u64:
    input: 'i16'
    output: 'u64'
    formula: 'x as u64 * 1000'
  scale_10:
    input: 'i16'
    output: 'f32'
    formula: '(x as f32) / 10.0'
  scale_1000:
    input: 'i16'
    output: 'f32'
    formula: '(x as f32) / 1000.0'
  
  identity_u8:
    input: 'u8'
    output: 'u8'
    formula: 'x'

  identity_i16:
    input: 'i16'
    output: 'i16'
    formula: 'x'
  
  identity_u16:
    input: 'u16'
    output: 'u16'
    formula: 'x'
  
  identity_i32:
    input: 'i32'
    output: 'i32'
    formula: 'x'

#  f16_to_f32:
#    input: 'f16'
#    output: 'f32'
#    formula: 'x as f32'

  # ======= GS communication =======
  # dump = convert Main PCB values to u64, to dump over ethernet (on main PCB)
  # parse = convert the u64 values received from ethernet to f64 (for display, on GS)
  dump-gs_2p_float:
    input: 'f32'
    output: 'u64'
    formula: '((10000.0 + x) * 100.0) as u64'
  parse-gs_2p_float:
    input: 'u64'
    output: 'f64'
    formula: '((x as f64) / 100.0) - 10000.0'
  
  dump-gs_u64:
    input: 'u64'
    output: 'u64'
    formula: 'x'
  parse-gs_u64:
    input: 'u64'
    output: 'f64'
    formula: 'x as f64'
  
  dump-gs_bool_u8:
    input: 'u8'
    output: 'u64'
    formula: 'x as u64'
  
  parse-gs_bool_u8:
    input: 'u64'
    output: 'f64'
    formula: 'x as f64'

  
  dump-gs_u8:
    input: 'u8'
    output: 'u64'
    formula: 'x as u64'
  
  parse-gs_u8:
    input: 'u64'
    output: 'f64'
    formula: 'x as f64'

  dump-gs_u16:
    input: 'u16'
    output: 'u64'
    formula: 'x as u64'
  
  parse-gs_u16:
    input: 'u64'
    output: 'f64'
    formula: 'x as f64'
  
  dump-gs_i16:
    input: 'i16'
    output: 'u64'
    formula: 'x as u64'
  
  parse-gs_i16:
    input: 'u64'
    output: 'f64'
    formula: 'x as f64'

  dump-gs_i32:
    input: 'i32'
    output: 'u64'
    formula: 'x as u64'
  
  parse-gs_i32:
    input: 'u64'
    output: 'f64'
    formula: 'x as f64'

  default_command_process:
    input: 'u64'
    output: '[u8; 8]'
    formula: 'x.to_be_bytes()'


standard-datapoints:
  - datapoint:
      name: 'DefaultDatatype'
      id: 0x00
    # upper: 42002
  - datapoint:
      name: 'CommandHash'
      id: 0x167
    priority: 1

  - datapoint:
      name: 'EventsHash'
      id: 0x168
    priority: 1

  - datapoint:
      name: 'DataHash'
      id: 0x169
    priority: 1

  - datapoint:
      name: 'ConfigHash'
      id: 0x171
    priority: 1

  - datapoint:
      name: 'ValueError'
      id: 0x16a
    priority: 1

  - datapoint:
      name: 'ValueWarning'
      id: 0x16b
    priority: 1

  - datapoint:
      name: 'ValueCausedBraking'
      id: 0x16c
    priority: 1

  - datapoint:
      name: 'LocalisationHeartbeat'
      id: 0x16e

  - datapoint:
      name: 'SensorHubHeartbeat'
      id: 0x16f

  - datapoint:
      name: 'FrontendHeartbeating'
      id: 0x170
    priority: 1

  - datapoint:
      name: 'FSMState'
      id: 0x202
      store:
        default: 0

message-processing:
  - name: 'TempMotorLeft'
    can:
      id: 0x33B
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'TempMotorLeft0'
          id: 0x4B0
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Motor Temperatures Left")!.addEntry(1, curr);
                  return curr;
              }
        getter: 'u8[0..1]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'TempMotorLeft1'
          id: 0x4B1
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Motor Temperatures Left")!.addEntry(2, curr);
                  return curr;
              }
        getter: 'u8[1..2]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'TempMotorLeft2'
          id: 0x4B2
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Motor Temperatures Left")!.addEntry(3, curr);
                  return curr;
              }
        getter: 'u8[2..3]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'

      - datapoint:
          name: 'TempMotorLeft3'
          id: 0x4B3
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Motor Temperatures Left")!.addEntry(4, curr);
                  return curr;
              }
        getter: 'u8[3..4]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'

      - datapoint:
          name: 'TempMotorLeft4'
          id: 0x4B4
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Motor Temperatures Left")!.addEntry(5, curr);
                  return curr;
              }
        getter: 'u8[4..5]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'

      - datapoint:
          name: 'TempMotorLeft5'
          id: 0x4B5
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Motor Temperatures Left")!.addEntry(6, curr);
                  return curr;
              }
        getter: 'u8[5..6]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'TempMotorLeft6'
          id: 0x556
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Motor Temperatures Left")!.addEntry(7, curr);
                  return curr;
              }
        getter: 'u8[6..7]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'TempMotorLeft7'
          id: 0x557
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Motor Temperatures Left")!.addEntry(8, curr);
                  return curr;
              }
        getter: 'u8[7..8]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
  - name: 'TempMotorRight'
    can:
      id: 0x33C
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'TempMotorRight0'
          id: 0x520
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Motor Temperatures Right")!.addEntry(1, curr);
                  return curr;
              }
        getter: 'u8[0..1]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'TempMotorRight1'
          id: 0x50A
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Motor Temperatures Right")!.addEntry(2, curr);
                  return curr;
              }
        getter: 'u8[1..2]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'TempMotorRight2'
          id: 0x50B
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Motor Temperatures Right")!.addEntry(3, curr);
                  return curr;
              }
        getter: 'u8[2..3]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'

      - datapoint:
          name: 'TempMotorRight3'
          id: 0x50C
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Motor Temperatures Right")!.addEntry(4, curr);
                  return curr;
              }
        getter: 'u8[3..4]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'

      - datapoint:
          name: 'TempMotorRight4'
          id: 0x50D
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Motor Temperatures Right")!.addEntry(5, curr);
                  return curr;
              }
        getter: 'u8[4..5]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'

      - datapoint:
          name: 'TempMotorRight5'
          id: 0x50E
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Motor Temperatures Right")!.addEntry(6, curr);
                  return curr;
              }
        getter: 'u8[5..6]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'

      - datapoint:
          name: 'TempMotorRight6'
          id: 0x50F
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Motor Temperatures Right")!.addEntry(7, curr);
                  return curr;
              }
        getter: 'u8[6..7]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'TempMotorRight7'
          id: 0x555
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Motor Temperatures Right")!.addEntry(8, curr);
                  return curr;
              }
        getter: 'u8[7..8]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
  - name: 'PTCLogs'
    can:
      id: 0x4E3
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'PTCState'
          id: 0x3A3
          store:
            default: 0
        getter: 'u8[0..1]'
        can-conversion: 'identity_u8:u8->u8'
        gs:
          conversion: 'gs_u8:u8'
      - datapoint:
          name: 'PTCNonCriticalFault'
          id: 0x3A4
          store:
            default: 0
        getter: 'u8[1..2]'
        can-conversion: 'identity_u8:u8->u8'
        gs:
          conversion: 'gs_u8:u8'
  - name: 'BMSLog1'
    can:
      id: 0x4E4
      bus: can2
    # fsm:
    #   event: 'ShutDown'
    datapoint-conversion:
      - datapoint:
          name: 'BMSVoltageHigh'
          id: 0x3A1
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("BMS Voltage High")!.addEntry(1, curr);
                  return curr;
              }
        getter: 'u16[0..2]'
        can-conversion: 'decode_bms_voltage:u16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
        display-units: 'V'
        limits:
          upper: { warn: 360, err: 420 }
          lower: { warn: 280, err: 270 }
      - datapoint:
          name: 'BMSVoltageLow'
          id: 0x19D
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("BMS Voltage Low")!.addEntry(1, curr);
                  return curr;
              }
        getter: 'u16[2..4]'
        can-conversion: 'decode_bms_voltage:u16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
        display-units: 'V'
        limits:
          upper: { warn: 360, err: 420 }
          lower: { warn: 280, err: 270 }
      - datapoint:
          name: 'BMSTemperatureHigh'
          id: 0x3A2
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("BMS Temps")!.addEntry(1, curr);
                  return curr;
              }
        getter: 'u16[4..6]'
        can-conversion: 'decode_bms_temperature:u16->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'BMSTemperatureLow'
          id: 0x19E
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("BMS Temps")!.addEntry(2, curr);
                  return curr;
              }
        getter: 'u16[6..8]'
        can-conversion: 'decode_bms_temperature:u16->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
  - name: 'BMSLog2'
    can:
      id: 0x4E5
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'VPack'
          id: 0x3A5
          store:
            default: 0
        getter: 'u16[0..2]'
        can-conversion: 'decode_bms_voltage:u16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
        display-units: 'V'
        limits:
          upper: { warn: 360, err: 420 }
          lower: { warn: 280, err: 270 }
      - datapoint:
          name: 'IPack'
          id: 0x3A6
          store:
            default: 0
        getter: 'u16[2..4]'
        can-conversion: 'decode_bms_voltage:u16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
        display-units: 'A'
        limits:
          upper: { warn: 360, err: 420 }
          lower: { warn: 280, err: 270 }
      - datapoint:
          name: 'VDCLink'
          id: 0x3A7
          store:
            default: 0
        getter: 'u16[4..6]'
        can-conversion: 'decode_bms_voltage:u16->f32'
        display-units: 'V'
        gs:
          conversion: 'gs_2p_float:f32'
  - name: 'TemperaturePrecisionRange'
    can:
      id: 0x1B4
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'TempRangeStart'
          id: 0x510
          store:
            default: 0
        getter: 'i16[0..2]'
        can-conversion: 'identity_i16:i16->i16'
        display-units: '°C'
        gs:
          conversion: 'gs_i16:i16'
      - datapoint:
          name: 'TempRangeEnd'
          id: 0x511
          store:
            default: 0
        getter: 'i16[2..4]'
        can-conversion: 'identity_i16:i16->i16'
        display-units: '°C'
        gs:
          conversion: 'gs_i16:i16'
  - name: 'Localization'
    can:
      id: 0x33A
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'Localization'
          id: 0x321
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Localization")!.addEntry(1, curr);
                  return curr;
              }
        getter: 'i32[0..4]'
        can-conversion: 'identity_i32:i32->i32'
        display-units: 'mm'
        gs:
          conversion: 'gs_i32:i32'
      - datapoint:
          name: 'Velocity'
          id: 0x527
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Velocity")!.addEntry(1, curr);
                  return curr;
              }
        getter: 'i16[4..6]'
        can-conversion: 'identity_i16:i16->i16'
        display-units: 'mm'
        gs:
          conversion: 'gs_i16:i16'
  - name: 'PPInitFault1'
    can:
      id: 0x505
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'PPInitFault1'
          id: 0x507
          store:
            default: 256
        getter: 'u8[0..1]'
        can-conversion: 'identity_u8:u8->u8'
        gs:
          conversion: 'gs_u8:u8'
  - name: 'PPInitFault2'
    can:
      id: 0x506
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'PPInitFault2'
          id: 0x508
          store:
            default: 256
        getter: 'u8[0..1]'
        can-conversion: 'identity_u8:u8->u8'
        gs:
          conversion: 'gs_u8:u8'
  - name: 'PPEmergency1'
    can:
      id: 0x4C
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'PPEmergency1'
          id: 0x04
          store:
            default: 0
        getter: 'u8[0..1]'
        can-conversion: 'identity_u8:u8->u8'
        gs:
          conversion: 'gs_u8:u8'
  - name: 'PPEmergency2'
    can:
      id: 0x4D
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'PPEmergency2'
          id: 0x003
          store:
            default: 0
        getter: 'u8[0..1]'
        can-conversion: 'identity_u8:u8->u8'
        gs:
          conversion: 'gs_u8:u8'
  - name: 'Word1'
    can:
      id: 0x4FC
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'Word1'
          id: 0x5B8
          store:
            default: 0
        getter: 'u16[0..2]'
        can-conversion: 'identity_u16:u16->u16'
        gs:
          conversion: 'gs_u16:u16'
  - name: 'Word2'
    can:
      id: 0x500
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'Word2'
          id: 0x4B6
          store:
            default: 0
        getter: 'u16[0..2]'
        can-conversion: 'identity_u16:u16->u16'
        gs:
          conversion: 'gs_u16:u16'
  - name: 'Log1RightMotor'
    can:
      id: 0x4FD
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'IqMeasured1'
          id: 0x4B7
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Propulsion Log 1 - Right Motor")!.addEntry(3, curr);
                  return curr;
              }
        getter: 'i16[0..2]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'IqReference1'
          id: 0x4B8
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Propulsion Log 1 - Right Motor")!.addEntry(4, curr);
                  return curr;
              }
        getter: 'i16[2..4]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'IdMeasured1'
          id: 0x4B9
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Propulsion Log 1 - Right Motor")!.addEntry(1, curr);
                  return curr;
              }
        getter: 'i16[4..6]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'IdReference1'
          id: 0x4BA
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Propulsion Log 1 - Right Motor")!.addEntry(2, curr);
                  return curr;
              }
        getter: 'i16[6..8]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
  - name: 'Log1LeftMotor'
    can:
      id: 0x502
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'IqMeasured2'
          id: 0x4BB
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Propulsion Log 1 - Left Motor")!.addEntry(3, curr);
                  return curr;
              }
        getter: 'i16[0..2]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'IqReference2'
          id: 0x4BC
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Propulsion Log 1 - Left Motor")!.addEntry(4, curr);
                  return curr;
              }
        getter: 'i16[2..4]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'IdMeasured2'
          id: 0x4BD
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Propulsion Log 1 - Left Motor")!.addEntry(1, curr);
                  return curr;
              }
        getter: 'i16[4..6]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'IdReference2'
          id: 0x4BE
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Propulsion Log 1 - Left Motor")!.addEntry(2, curr);
                  return curr;
              }
        getter: 'i16[6..8]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
  - name: 'Log2RightMotor'
    can:
      id: 0x4FE
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'Vq_Log1'
          id: 0x4BF
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Propulsion Log 2 - Right Motor")!.addEntry(1, curr);
                  return curr;
              }
        getter: 'i16[0..2]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Vd_Log1'
          id: 0x521
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Propulsion Log 2 - Right Motor")!.addEntry(2, curr);
                  return curr;
              }
        getter: 'i16[2..4]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Vbus1'
          id: 0x4C1
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Propulsion Log 2 - Right Motor")!.addEntry(3, curr);
                  return curr;
              }
        getter: 'i16[4..6]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Ibus1'
          id: 0x4C2
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Propulsion Log 2 - Right Motor")!.addEntry(4, curr);
                  return curr;
              }
        getter: 'i16[6..8]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
  - name: 'CANLog'
    can:
      id: 0xFFE
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: "CANLog"
          id: 0xFFD
          store:
            default: 0
        getter: 'u16[0..2]'
        can-conversion: 'identity_u16:u16->u16'
        gs:
          conversion: 'gs_u16:u16'
  - name: 'Log2LeftMotor'
    can:
      id: 0x503
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'Vq_Log2'
          id: 0x4C3
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Propulsion Log 2 - Left Motor")!.addEntry(1, curr);
                  return curr;
              }
        getter: 'i16[0..2]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Vd_Log2'
          id: 0x4C4
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Propulsion Log 2 - Left Motor")!.addEntry(2, curr);
                  return curr;
              }
        getter: 'i16[2..4]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Vbus2'
          id: 0x4C5
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Propulsion Log 2 - Left Motor")!.addEntry(3, curr);
                  return curr;
              }
        getter: 'i16[4..6]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Ibus2'
          id: 0x4C6
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Propulsion Log 2 - Left Motor")!.addEntry(4, curr);
                  return curr;
              }
        getter: 'i16[6..8]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
  - name: 'Log3RightMotor'
    can:
      id: 0x4FF
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'Ta1'
          id: 0x4C7
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Propulsion Log 3 - Right Motor")!.addEntry(1, curr);
                  return curr;
              }
        getter: 'i16[0..2]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Tb1'
          id: 0x4C8
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Propulsion Log 3 - Right Motor")!.addEntry(2, curr);
                  return curr;
              }
        getter: 'i16[2..4]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Tc1'
          id: 0x4C9
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Propulsion Log 3 - Right Motor")!.addEntry(3, curr);
                  return curr;
              }
        getter: 'i16[4..6]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'TCASE1'
          id: 0x4CA
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Propulsion Log 3 - Right Motor")!.addEntry(4, curr);
                  return curr;
              }
        getter: 'i16[6..8]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
  - name: 'Log3LeftMotor'
    can:
      id: 0x504
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'Ta2'
          id: 0x4CB
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Propulsion Log 3 - Left Motor")!.addEntry(1, curr);
                  return curr;
              }
        getter: 'i16[0..2]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Tb2'
          id: 0x4CC
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Propulsion Log 3 - Left Motor")!.addEntry(2, curr);
                  return curr;
              }
        getter: 'i16[2..4]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Tc2'
          id: 0x4CD
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Propulsion Log 3 - Left Motor")!.addEntry(3, curr);
                  return curr;
              }
        getter: 'i16[4..6]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'TCASE2'
          id: 0x4CE
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Propulsion Log 3 - Left Motor")!.addEntry(4, curr);
                  return curr;
              }
        getter: 'i16[6..8]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
  - name: 'FSMAckProp1'
    can:
      id: 0x36C
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'FSMAckProp1'
          id: 0x525
          store:
            default: 0
        getter: 'u16[0..2]'
        can-conversion: 'identity_u16:u16->u16'
        gs:
          conversion: 'gs_u16:u16'
  - name: 'FSMAckProp2'
    can:
      id: 0x36D
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'FSMAckProp2'
          id: 0x526
          store:
            default: 0
        getter: 'u16[0..2]'
        can-conversion: 'identity_u16:u16->u16'
        gs:
          conversion: 'gs_u16:u16'
  - name: 'FSMAckLevi'
    can:
      id: 0x385
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'FSMAckLevi'
          id: 0x52A
          store:
            default: 0
        getter: 'u8[0..1]'
        can-conversion: 'identity_u8:u8->u8'
        gs:
          conversion: 'gs_u8:u8'
  - name: 'ClearFaultAckLevi'
    can:
      id: 0x386
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'ClearFaultAckLevi'
          id: 0x52B
          store:
            default: 0
        getter: 'u8[0..1]'
        can-conversion: 'identity_u8:u8->u8'
        gs:
          conversion: 'gs_u8:u8'
  - name: 'Offset'
    can:
      id: 0x387
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'Offset1'
          id: 0x848
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Offset")!.addEntry(1, curr);
                  return curr;
              }
        getter: 'u16[0..2]'
        can-conversion: 'decode_offset:u16->f32'
        display-units: 'mm'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Offset2'
          id: 0x849
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Offset")!.addEntry(2, curr);
                  return curr;
              }
        getter: 'u16[2..4]'
        can-conversion: 'decode_offset:u16->f32'
        display-units: 'mm'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Offset3'
          id: 0x84A
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Offset")!.addEntry(3, curr);
                  return curr;
              }
        getter: 'u16[4..6]'
        can-conversion: 'decode_offset:u16->f32'
        display-units: 'mm'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Offset4'
          id: 0x84B
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Offset")!.addEntry(4, curr);
                  return curr;
              }
        getter: 'u16[6..8]'
        can-conversion: 'decode_offset:u16->f32'
        display-units: 'mm'
        gs:
          conversion: 'gs_2p_float:f32'
  - name: 'LevitationState'
    can:
      id: 0x515
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'LevitationState'
          id: 0x528
          store:
            default: 0
        getter: 'u8[0..1]'
        can-conversion: 'identity_u8:u8->u8'
        gs:
          conversion: 'gs_u8:u8'
      - datapoint:
          name: 'NonCriticalLeviError'
          id: 0x529
          store:
            default: 0
        getter: 'u8[1..2]'
        can-conversion: 'identity_u8:u8->u8'
        gs:
          conversion: 'gs_u8:u8'
  - name: 'Airgaps'
    can:
      id: 0x515
      bus: can2
      log_period: 100
    datapoint-conversion:
      - datapoint:
          name: 'VAirgap'
          id: 0x52C
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Air Gaps")!.addEntry(1, curr);
                  return curr;
              }
        getter: 'u16[0..2]'
        can-conversion: 'identity_u16:u16->u16'
        gs:
          conversion: 'gs_u16:u16'
        beckhoff:
          name: 'VAirgap'
          levi_type: 'LReal'
          formula: 'LREAL_TO_UINT($ * 100)'
      - datapoint:
          name: 'HAirgap'
          id: 0x52D
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Air Gaps")!.addEntry(2, curr);
                  return curr;
              }
        getter: 'u16[2..4]'
        can-conversion: 'identity_u16:u16->u16'
        gs:
          conversion: 'gs_u16:u16'
        beckhoff:
          name: 'HAirgap'
          levi_type: 'LReal'
          formula: 'LREAL_TO_UINT($ * 100)'
#  - name: 'Angles'
#    can:
#      id: 0x517
#      bus: can2
#      log_period: 100
#    datapoint-conversion:
#      - datapoint:
#          name: 'Roll'
#          id: 0x52E
#          store:
#            default: 0
#            callback: |
#              data => {
#                  const curr = Number(data);
#                  $chartStore.get("Angles")!.addEntry(1, curr);
#                  return curr;
#              }
#        getter: 'u16[0..2]'
#        can-conversion: ''
#        gs:
#          conversion: ''
#      - datapoint:
#          name: 'Pitch'
#          id: 0x52F
#          store:
#            default: 0
#            callback: |
#              data => {
#                  const curr = Number(data);
#                  $chartStore.get("Angles")!.addEntry(2, curr);
#                  return curr;
#              }
#        getter: 'u16[2..4]'
#        can-conversion: ''
#        gs:
#          conversion: ''
#      - datapoint:
#          name: 'Yaw'
#          id: 0x530
#          store:
#            default: 0
#            callback: |
#              data => {
#                  const curr = Number(data);
#                  $chartStore.get("Angles")!.addEntry(3, curr);
#                  return curr;
#              }
#        getter: 'u16[4..6]'
#        can-conversion: ''
#        gs:
#          conversion: ''
#  - name: 'CurrentHEMS'
#    can:
#      id: 0x518
#      bus: can2
#    datapoint-conversion:
#      - datapoint:
#          name: 'VFL'
#          id: 0x531
#          store:
#            default: 0
#            callback: |
#              data => {
#                  const curr = Number(data);
#                  $chartStore.get("HEMS Current")!.addEntry(1, curr);
#                  return curr;
#              }
#        getter: 'u16[0..2]'
#        can-conversion: ''
#        gs:
#          conversion: ''
#      - datapoint:
#          name: 'VFR'
#          id: 0x532
#          store:
#            default: 0
#            callback: |
#              data => {
#                  const curr = Number(data);
#                  $chartStore.get("HEMS Current")!.addEntry(2, curr);
#                  return curr;
#              }
#        getter: 'u16[2..4]'
#        can-conversion: ''
#        gs:
#          conversion: ''
#      - datapoint:
#          name: 'VBL'
#          id: 0x533
#          store:
#            default: 0
#            callback: |
#              data => {
#                  const curr = Number(data);
#                  $chartStore.get("HEMS Current")!.addEntry(3, curr);
#                  return curr;
#              }
#        getter: 'u16[4..6]'
#        can-conversion: ''
#        gs:
#          conversion: ''
#      - datapoint:
#          name: 'VBR'
#          id: 0x534
#          store:
#            default: 0
#            callback: |
#              data => {
#                  const curr = Number(data);
#                  $chartStore.get("HEMS Current")!.addEntry(4, curr);
#                  return curr;
#              }
#        getter: 'u16[6..8]'
#        can-conversion: ''
#        gs:
#          conversion: ''
#  - name: 'CurrentEMS'
#    can:
#      id: 0x519
#      bus: can2
#    datapoint-conversion:
#      - datapoint:
#          name: 'LF'
#          id: 0x535
#          store:
#            default: 0
#            callback: |
#              data => {
#                  const curr = Number(data);
#                  $chartStore.get("EMS Current")!.addEntry(1, curr);
#                  return curr;
#              }
#        getter: 'u16[0..2]'
#        can-conversion: ''
#        gs:
#          conversion: ''
#      - datapoint:
#          name: 'LB'
#          id: 0x536
#          store:
#            default: 0
#            callback: |
#              data => {
#                  const curr = Number(data);
#                  $chartStore.get("EMS Current")!.addEntry(2, curr);
#                  return curr;
#              }
#        getter: 'u16[2..4]'
#        can-conversion: ''
#        gs:
#          conversion: ''
#  - name: 'RequestedForce1Levi'
#    can:
#      id: 0x51A
#      bus: can2
#    datapoint-conversion:
#      - datapoint:
#          name: 'Z'
#          id: 0x537
#          store:
#            default: 0
#            callback: |
#              data => {
#                  const curr = Number(data);
#                  $chartStore.get("Requested Force 1")!.addEntry(1, curr);
#                  return curr;
#              }
#        getter: 'u16[0..2]'
#        can-conversion: ''
#        gs:
#          conversion: ''
#      - datapoint:
#          name: 'Roll'
#          id: 0x538
#          store:
#            default: 0
#            callback: |
#              data => {
#                  const curr = Number(data);
#                  $chartStore.get("Requested Force 1")!.addEntry(2, curr);
#                  return curr;
#              }
#        getter: 'u16[2..4]'
#        can-conversion: ''
#        gs:
#          conversion: ''
#      - datapoint:
#          name: 'Pitch'
#          id: 0x539
#          store:
#            default: 0
#            callback: |
#              data => {
#                  const curr = Number(data);
#                  $chartStore.get("Requested Force 1")!.addEntry(3, curr);
#                  return curr;
#              }
#        getter: 'u16[4..6]'
#        can-conversion: ''
#        gs:
#          conversion: ''
#  - name: 'RequestedForce2Levi'
#    can:
#      id: 0x51B
#      bus: can2
#    datapoint-conversion:
#      - datapoint:
#          name: 'Y'
#          id: 0x53A
#          store:
#            default: 0
#            callback: |
#              data => {
#                  const curr = Number(data);
#                  $chartStore.get("Requested Force 2")!.addEntry(1, curr);
#                  return curr;
#              }
#        getter: 'u16[0..2]'
#        can-conversion: ''
#        gs:
#          conversion: ''
#      - datapoint:
#          name: 'Yaw'
#          id: 0x53B
#          store:
#            default: 0
#            callback: |
#              data => {
#                  const curr = Number(data);
#                  $chartStore.get("Requested Force 2")!.addEntry(2, curr);
#                  return curr;
#              }
#        getter: 'u16[2..4]'
#        can-conversion: ''
#        gs:
#          conversion: ''
  - name: 'TempHEMS'
    can:
      id: 0x33D
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'TempHEMS1'
          id: 0x53C
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Temperatures HEMS")!.addEntry(1, curr);
                  return curr;
              }
        getter: 'u8[0..1]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'TempHEMS2'
          id: 0x53D
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Temperatures HEMS")!.addEntry(2, curr);
                  return curr;
              }
        getter: 'u8[1..2]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'TempHEMS3'
          id: 0x53E
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Temperatures HEMS")!.addEntry(3, curr);
                  return curr;
              }
        getter: 'u8[2..3]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'TempHEMS4'
          id: 0x53F
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Temperatures HEMS")!.addEntry(4, curr);
                  return curr;
              }
        getter: 'u8[3..4]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'TempHEMS5'
          id: 0x540
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Temperatures HEMS")!.addEntry(5, curr);
                  return curr;
              }
        getter: 'u8[4..5]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'TempHEMS6'
          id: 0x541
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Temperatures HEMS")!.addEntry(6, curr);
                  return curr;
              }
        getter: 'u8[5..6]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'TempHEMS7'
          id: 0x542
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Temperatures HEMS")!.addEntry(7, curr);
                  return curr;
              }
        getter: 'u8[6..7]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'TempHEMS8'
          id: 0x543
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Temperatures HEMS")!.addEntry(8, curr);
                  return curr;
              }
        getter: 'u8[7..8]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
  - name: 'TempEMS'
    can:
      id: 0x33E
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'TempEMS1'
          id: 0x544
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Temperatures EMS")!.addEntry(1, curr);
                  return curr;
              }
        getter: 'u8[0..1]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'TempEMS2'
          id: 0x545
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Temperatures EMS")!.addEntry(2, curr);
                  return curr;
              }
        getter: 'u8[1..2]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'TempEMS3'
          id: 0x546
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Temperatures EMS")!.addEntry(3, curr);
                  return curr;
              }
        getter: 'u8[2..3]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'TempEMS4'
          id: 0x547
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Temperatures EMS")!.addEntry(4, curr);
                  return curr;
              }
        getter: 'u8[3..4]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'TempEMS5'
          id: 0x548
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Temperatures EMS")!.addEntry(5, curr);
                  return curr;
              }
        getter: 'u8[4..5]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'TempEMS6'
          id: 0x549
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Temperatures EMS")!.addEntry(6, curr);
                  return curr;
              }
        getter: 'u8[5..6]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'TempEMS7'
          id: 0x54A
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Temperatures EMS")!.addEntry(7, curr);
                  return curr;
              }
        getter: 'u8[6..7]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'TempEMS8'
          id: 0x54B
          store:
            default: 0
            callback: |
              data => {
                  const curr = Number(data);
                  $chartStore.get("Temperatures EMS")!.addEntry(8, curr);
                  return curr;
              }
        getter: 'u8[7..8]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'

commands:
  - name: 'DefaultCommand'
    id: 0xFFF
  - name: 'GeneralEmergency'
    id: 0x1
    can:
      id: 0x1
      bus: can2
  - name: 'FSMUpdate'
    id: 0x190
    can:
      id: 0x190
      bus: can2
      trim: 7
  - name: 'SystemCheck'
    id: 0x191
    can:
      id: 0x191
      bus: can2
  - name: 'ResetSenseCon'
    id: 0x1AA
    can:
        id: 0x1AA
        bus: can2
  - name: 'ResetPowertrain'
    id: 0x1AB
    can:
      id: 0x1AB
      bus: can2
  - name: 'ResetPropulsion'
    id: 0x1AC
    can:
      id: 0x1AC
      bus: can2
  - name: 'ResetLevitation'
    id: 0x1AD
    can:
      id: 0x1AD
      bus: can2
  - name: 'ResetLocalization'
    id: 0x1B5
    can:
      id: 0x1B5
      bus: can2
  - name: 'Heartbeat'
    id: 0x042
  - name: 'FrontendHeartbeat'
    id: 0x043
  - name: 'EmitEvent'
    id: 0x7A0
  - name: 'StartHV'
    id: 0x60
  - name: 'StopHV'
    id: 0x61
  - name: 'LevitationOn'
    id: 0x407
  - name: 'LevitationOff'
    id: 0x408
  - name: 'vertical_0_current'
    id: 0x409
  - name: 'vert_0_current_reset'
    id: 0x40a
  - name: 'PropulsionOn'
    id: 0x6c
  - name: 'PropulsionOff'
    id: 0x6d
  - name: 'SendPropulsionControlWord1'
    id: 0x1AE
    can:
      id: 0x1AE
      bus: can2
  - name: 'SendPropulsionControlWord2'
    id: 0x1AF
    can:
      id: 0x1AF
      bus: can2
  - name: 'PPControlParams'
    id: 0x1B0
    can:
      id: 0x1B0
      bus: can2
  - name: 'PPDebugParams1'
    id: 0x1B1
    can:
      id: 0x1B1
      bus: can2
  - name: 'PPDebugParams2'
    id: 0x1B2
    can:
      id: 0x1B2
      bus: can2
  - name: 'PPTestControlParams'
    id: 0x1B3
    can:
      id: 0x1B3
      bus: can2
  - name: 'Shutdown'
    id: 0x5f
  - name: 'EmergencyBrake'
    id: 0xff
    can:
      id: 0x002
      bus: can2
  - name: 'SystemReset'
    id: 0x192
  - name: 'RearmSDC'
    id: 0x1B6

beckhoff:
  task-period: 10 # period in ms