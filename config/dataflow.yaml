# Define procedures

procedures:
  # ====== Decode =======
  decode_temperature:
    input: 'u8'
    output: 'f32'
    formula: |
      let precision_range_start: f32 = 20.0;
      if x & 0x80 != 0 {
        precision_range_start + ((x & 0x7F) as f32 / 10.0)
        // High precision mode
      } else {
        x as f32 // Integer mode
      }
  decode_bms_voltage:
    input: 'u16'
    output: 'f32'
    formula: '(x as f32) / 10.0'
  decode_bms_temperature:
    input: 'u16'
    output: 'f32'
    formula: 'x as f32'
  convert_i16_to_u64:
    input: 'i16'
    output: 'u64'
    formula: 'x as u64 * 1000'
  scale_10:
    input: 'i16'
    output: 'f32'
    formula: '(x as f32) * 10.0'
  scale_1000:
    input: 'i16'
    output: 'f32'
    formula: '(x as f32) * 1000.0'
  
  identity_u8:
    input: 'u8'
    output: 'u8'
    formula: 'x'

  identity_i16:
    input: 'i16'
    output: 'i16'
    formula: 'x'
  
  identity_u16:
    input: 'u16'
    output: 'u16'
    formula: 'x'
  
  identity_i32:
    input: 'i32'
    output: 'i32'
    formula: 'x'

  # ======= GS communication =======
  dump-gs_2p_float:
    input: 'f32'
    output: 'u64'
    formula: '(10000.0 + x) * 100.0 as u64'
  parse-gs_2p_float:
    input: 'u64'
    output: 'f64'
    formula: '(x as f64) / 100.0 - 10000.0'
  
  dump-gs_u64:
    input: 'u64'
    output: 'u64'
    formula: 'x'
  parse-gs_u64:
    input: 'u64'
    output: 'f64'
    formula: 'x as f64'
  
  dump-gs_bool_u8:
    input: 'u8'
    output: 'u64'
    formula: 'x as u64'
  
  parse-gs_bool_u8:
    input: 'u64'
    output: 'f64'
    formula: 'x as f64'

  dump-gs_u16:
    input: 'u16'
    output: 'u64'
    formula: 'x as u64'
  
  parse-gs_u16:
    input: 'u64'
    output: 'f64'
    formula: 'x as f64'
  
  dump-gs_i16:
    input: 'i16'
    output: 'u64'
    formula: 'x as u64'
  
  parse-gs_i16:
    input: 'u64'
    output: 'f64'
    formula: 'x as f64'

  dump-gs_i32:
    input: 'i32'
    output: 'u64'
    formula: 'x as u64'
  
  parse-gs_i32:
    input: 'u64'
    output: 'f64'
    formula: 'x as f64'


standard-datapoints:
  - datapoint:
      name: 'DefaultDatatype'
      id: 0x00
    # upper: 42002
  - datapoint:
      name: 'CommandHash'
      id: 0x167
    priority: 1

  - datapoint:
      name: 'EventsHash'
      id: 0x168
    priority: 1

  - datapoint:
      name: 'DataHash'
      id: 0x169
    priority: 1

  - datapoint:
      name: 'ConfigHash'
      id: 0x171
    priority: 1

  - datapoint:
      name: 'ValueError'
      id: 0x16a
    priority: 1

  - datapoint:
      name: 'ValueWarning'
      id: 0x16b
    priority: 1

  - datapoint:
      name: 'ValueCausedBraking'
      id: 0x16c
    priority: 1

  - datapoint:
      name: 'LocalisationHeartbeat'
      id: 0x16e

  - datapoint:
      name: 'SensorHubHeartbeat'
      id: 0x16f

  - datapoint:
      name: 'FrontendHeartbeating'
      id: 0x170
    priority: 1
  - datapoint:
      name: 'PropulsionCurrent'
      id: 0x200
  - datapoint:
      name: 'Localisation'
      id: 0x201


message-processing:
  - name: 'TempAmbient'
    can:
      id: 0x12
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'TempAmbient0'
          id: 0x4B0
        getter: 'u8[0..1]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'TempAmbient1'
          id: 0x4B1
        getter: 'u8[1..2]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'TempAmbient2'
          id: 0x4B2
        getter: 'u8[2..3]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
  - name: 'BMSLog1'
    can:
      id: 0x4B1
      bus: can2
    fsm:
      event: 'ShutDown'
    datapoint-conversion:
      - datapoint:
          name: 'BMSVoltageHigh'
          id: 0x3A1
        getter: 'u16[0..2]'
        can-conversion: 'decode_bms_voltage:u16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
        display-units: 'V'
        limits:
          upper: { warn: 360, err: 420 }
          lower: { warn: 280, err: 270 }
      - datapoint:
          name: 'BMSVoltageLow'
          id: 0x19D
        getter: 'u16[2..4]'
        can-conversion: 'decode_bms_voltage:u16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
        display-units: 'V'
        limits:
          upper: { warn: 360, err: 420 }
          lower: { warn: 280, err: 270 }
      - datapoint:
          name: 'BMSTemperatureHigh'
          id: 0x3A2
        getter: 'u16[4..6]'
        can-conversion: 'decode_bms_temperature:u16->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'BMSTemperatureLow'
          id: 0x19E
        getter: 'u16[6..8]'
        can-conversion: 'decode_bms_temperature:u16->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
  - name: 'TemperaturePrecisionRange'
    can:
      id: 0x1AA
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'TempRangeStart'
          id: 0x1AA
        getter: 'i16[0..2]' 
        can-conversion: 'identity_i16:i16->i16'
        display-units: '°C'
        gs:
          conversion: 'gs_i16:i16'
      - datapoint:
          name: 'TempRangeEnd'
          id: 0x1AB
        getter: 'i16[2..4]' 
        can-conversion: 'identity_i16:i16->i16'
        display-units: '°C'
        gs:
          conversion: 'gs_i16:i16'
  - name: 'Localization'
    can:
      id: 0x320
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'Loc1'
          id: 0x320
        getter: 'i32[0..4]'
        can-conversion: 'identity_i32:i32->i32'
        display-units: 'mm'
        gs:
          conversion: 'gs_i32:i32'
      - datapoint:
          name: 'Loc2'
          id: 0x321
        getter: 'i32[4..8]'
        can-conversion: 'identity_i32:i32->i32'
        display-units: 'mm'
        gs:
          conversion: 'gs_i32:i32'
      - datapoint:
          name: 'Loc3'
          id: 0x322
        getter: 'i32[8..12]'
        can-conversion: 'identity_i32:i32->i32'
        display-units: 'mm'
        gs:
          conversion: 'gs_i32:i32'
      - datapoint:
          name: 'Loc4'
          id: 0x323
        getter: 'i32[12..16]'
        can-conversion: 'identity_i32:i32->i32'
        display-units: 'mm'
        gs:
          conversion: 'gs_i32:i32'
  - name: 'Temperature'
    can:
      id: 0x33A
      bus: can1
    datapoint-conversion:
      - datapoint:
          name: 'Temp0'
          id: 0x33A
        getter: 'u8[0..1]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Temp1'
          id: 0x33B
        getter: 'u8[1..2]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Temp2'
          id: 0x33C
        getter: 'u8[2..3]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Temp3'
          id: 0x33D
        getter: 'u8[3..4]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Temp4'
          id: 0x33E
        getter: 'u8[4..5]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Temp5'
          id: 0x33F
        getter: 'u8[5..6]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Temp6'
          id: 0x340
        getter: 'u8[6..7]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Temp7'
          id: 0x341
        getter: 'u8[7..8]'
        can-conversion: 'decode_temperature:u8->f32'
        display-units: '°C'
        gs:
          conversion: 'gs_2p_float:f32'
  - name: 'ResetSenseCon'
    can:
      id: 0x193
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'ResetSenseCon'
          id: 0x193
        getter: 'u8[0..1]'
        can-conversion: 'identity_u8:u8->u8'
        gs:
          conversion: 'gs_bool_u8:u8'
  - name: 'ResetPropulsion'
    can:
      id: 0x195
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'ResetPropulsion'
          id: 0x195
        getter: 'u8[0..1]'
        can-conversion: 'identity_u8:u8->u8'
        gs:
          conversion: 'gs_bool_u8:u8'
  - name: 'PPControlParameters'
    can:
      id: 0x33E
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'ModulationFactor1'
          id: 0x830
        getter: 'i16[0..2]'
        can-conversion: 'convert_i16_to_u64:i16->u64'  # Convert i16 to f32
        gs:
          conversion: 'gs_u64:u64'  # Use the custom function
      - datapoint:
          name: 'ModulationFactor2'
          id: 0x831
        getter: 'i16[2..4]'
        can-conversion: 'convert_i16_to_u64:i16->u64'  # Convert i16 to f32
        gs:
          conversion: 'gs_u64:u64'  # Use the custom function
      - datapoint:
          name: 'MaximumVelocity1'
          id: 0x832
        getter: 'i16[4..6]'
        can-conversion: 'convert_i16_to_u64:i16->u64'
        gs:
          conversion: 'gs_u64:u64'
      - datapoint:
          name: 'MaximumVelocity2'
          id: 0x833
        getter: 'i16[6..8]'
        can-conversion: 'convert_i16_to_u64:i16->u64'
        gs:
          conversion: 'gs_u64:u64'
  - name: 'PPDebugParameters1'
    can:
      id: 0x33F
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'Kpq1'
          id: 0x834
        getter: 'i16[0..2]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Kpq2'
          id: 0x835
        getter: 'i16[2..4]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Kiq1'
          id: 0x836
        getter: 'i16[4..6]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Kiq2'
          id: 0x837
        getter: 'i16[6..8]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Kpd1'
          id: 0x838
        getter: 'i16[8..10]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Kpd2'
          id: 0x839
        getter: 'i16[10..12]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Kid1'
          id: 0x83A
        getter: 'i16[12..14]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Kid2'
          id: 0x83B
        getter: 'i16[14..16]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
  - name: 'PPDebugParameters2'
    can:
      id: 0x340
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'PositionOffset1'
          id: 0x83C
        getter: 'i16[0..2]'
        can-conversion: 'scale_1000:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'PositionOffset2'
          id: 0x83D
        getter: 'i16[2..4]'
        can-conversion: 'scale_1000:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Alpha1'
          id: 0x83E
        getter: 'i16[4..6]'
        can-conversion: 'scale_1000:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Alpha2'
          id: 0x83F
        getter: 'i16[6..8]'
        can-conversion: 'scale_1000:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
  - name: 'PPTestControlParameters'
    can:
      id: 0x341
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'Iq1'
          id: 0x840
        getter: 'i16[0..2]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Iq2'
          id: 0x841
        getter: 'i16[2..4]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Id1'
          id: 0x842
        getter: 'i16[4..6]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Id2'
          id: 0x843
        getter: 'i16[6..8]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Vq1_C'
          id: 0x844
        getter: 'i16[8..10]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Vq2_C'
          id: 0x845
        getter: 'i16[10..12]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Vd1_C'
          id: 0x846
        getter: 'i16[12..14]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Vd2_C'
          id: 0x847
        getter: 'i16[14..16]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
  - name: 'PPEmergency'
    can:
      id: 0x002
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'PPEmergency'
          id: 0x002
        getter: 'u8[0..1]'
        can-conversion: 'identity_u8:u8->u8'
        gs:
          conversion: 'gs_bool_u8:u8'
  - name: 'Word'
    can:
      id: 0x4B3
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'Word1'
          id: 0x4B3
        getter: 'u16[0..2]'
        can-conversion: 'identity_u16:u16->u16'
        gs:
          conversion: 'gs_u16:u16'
      - datapoint:
          name: 'Word2'
          id: 0x4B4
        getter: 'u16[2..4]'
        can-conversion: 'identity_u16:u16->u16'
        gs:
          conversion: 'gs_u16:u16'
  - name: 'Log1'
    can:
      id: 0x4B4
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'IqMeasured1'
          id: 0x4B5
        getter: 'i16[0..2]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'IqMeasured2'
          id: 0x4B6
        getter: 'i16[2..4]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'IqReference1'
          id: 0x4B7
        getter: 'i16[4..6]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'IqReference2'
          id: 0x4B8
        getter: 'i16[6..8]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
  - name: 'Log2'
    can:
      id: 0x4B9
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'Vq1_Log'
          id: 0x4BA
        getter: 'i16[0..2]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Vq2_Log'
          id: 0x4BB
        getter: 'i16[2..4]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Vd1_Log'
          id: 0x4BC
        getter: 'i16[4..6]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Vd2_Log'
          id: 0x4BD
        getter: 'i16[6..8]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Vbus1'
          id: 0x4BE
        getter: 'i16[8..10]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Vbus2'
          id: 0x4BF
        getter: 'i16[10..12]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Ibus1'
          id: 0x4C0
        getter: 'i16[12..14]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Ibus2'
          id: 0x4C1
        getter: 'i16[14..16]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
  - name: 'Log3'
    can:
      id: 0x4C2
      bus: can2
    datapoint-conversion:
      - datapoint:
          name: 'Ta1'
          id: 0x4C3
        getter: 'i16[0..2]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Ta2'
          id: 0x4C4
        getter: 'i16[2..4]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Tb1'
          id: 0x4C5
        getter: 'i16[4..6]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Tb2'
          id: 0x4C6
        getter: 'i16[6..8]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Tc1'
          id: 0x4C7
        getter: 'i16[8..10]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'
      - datapoint:
          name: 'Tc2'
          id: 0x4C8
        getter: 'i16[10..12]'
        can-conversion: 'scale_10:i16->f32'
        gs:
          conversion: 'gs_2p_float:f32'


 
 
